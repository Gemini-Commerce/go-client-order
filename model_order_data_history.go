/*
order Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package order

import (
	"encoding/json"
	"time"
)

// checks if the OrderDataHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDataHistory{}

// OrderDataHistory struct for OrderDataHistory
type OrderDataHistory struct {
	CreatedAt            *time.Time `json:"createdAt,omitempty"`
	Status               *string    `json:"status,omitempty"`
	Comment              *string    `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderDataHistory OrderDataHistory

// NewOrderDataHistory instantiates a new OrderDataHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDataHistory() *OrderDataHistory {
	this := OrderDataHistory{}
	return &this
}

// NewOrderDataHistoryWithDefaults instantiates a new OrderDataHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDataHistoryWithDefaults() *OrderDataHistory {
	this := OrderDataHistory{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderDataHistory) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataHistory) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderDataHistory) IsSetCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrderDataHistory) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderDataHistory) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataHistory) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderDataHistory) IsSetStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OrderDataHistory) SetStatus(v string) {
	o.Status = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *OrderDataHistory) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataHistory) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *OrderDataHistory) IsSetComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *OrderDataHistory) SetComment(v string) {
	o.Comment = &v
}

func (o OrderDataHistory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDataHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderDataHistory) UnmarshalJSON(data []byte) (err error) {
	varOrderDataHistory := _OrderDataHistory{}

	err = json.Unmarshal(data, &varOrderDataHistory)

	if err != nil {
		return err
	}

	*o = OrderDataHistory(varOrderDataHistory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "status")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *OrderDataHistory) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *OrderDataHistory) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableOrderDataHistory struct {
	value *OrderDataHistory
	isSet bool
}

func (v NullableOrderDataHistory) Get() *OrderDataHistory {
	return v.value
}

func (v *NullableOrderDataHistory) Set(val *OrderDataHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDataHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDataHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDataHistory(val *OrderDataHistory) *NullableOrderDataHistory {
	return &NullableOrderDataHistory{value: val, isSet: true}
}

func (v NullableOrderDataHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDataHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
