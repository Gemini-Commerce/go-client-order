/*
order Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package order

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderDataPaymentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDataPaymentInfo{}

// OrderDataPaymentInfo struct for OrderDataPaymentInfo
type OrderDataPaymentInfo struct {
	Code string `json:"code"`
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	Amount OrderMoney `json:"amount"`
	Fee *OrderMoney `json:"fee,omitempty"`
	VatAmount *OrderMoney `json:"vatAmount,omitempty"`
	VatPercentage *float32 `json:"vatPercentage,omitempty"`
	VatInaccurate *bool `json:"vatInaccurate,omitempty"`
	VatCalculated *bool `json:"vatCalculated,omitempty"`
	Title *OrderLocalizedText `json:"title,omitempty"`
	Label *OrderLocalizedText `json:"label,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderDataPaymentInfo OrderDataPaymentInfo

// NewOrderDataPaymentInfo instantiates a new OrderDataPaymentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDataPaymentInfo(code string, amount OrderMoney) *OrderDataPaymentInfo {
	this := OrderDataPaymentInfo{}
	this.Code = code
	this.Amount = amount
	return &this
}

// NewOrderDataPaymentInfoWithDefaults instantiates a new OrderDataPaymentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDataPaymentInfoWithDefaults() *OrderDataPaymentInfo {
	this := OrderDataPaymentInfo{}
	return &this
}

// GetCode returns the Code field value
func (o *OrderDataPaymentInfo) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *OrderDataPaymentInfo) SetCode(v string) {
	o.Code = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetAdditionalInfo() string {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *OrderDataPaymentInfo) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

// GetAmount returns the Amount field value
func (o *OrderDataPaymentInfo) GetAmount() OrderMoney {
	if o == nil {
		var ret OrderMoney
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetAmountOk() (*OrderMoney, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *OrderDataPaymentInfo) SetAmount(v OrderMoney) {
	o.Amount = v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetFee() OrderMoney {
	if o == nil || IsNil(o.Fee) {
		var ret OrderMoney
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetFeeOk() (*OrderMoney, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given OrderMoney and assigns it to the Fee field.
func (o *OrderDataPaymentInfo) SetFee(v OrderMoney) {
	o.Fee = &v
}

// GetVatAmount returns the VatAmount field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetVatAmount() OrderMoney {
	if o == nil || IsNil(o.VatAmount) {
		var ret OrderMoney
		return ret
	}
	return *o.VatAmount
}

// GetVatAmountOk returns a tuple with the VatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetVatAmountOk() (*OrderMoney, bool) {
	if o == nil || IsNil(o.VatAmount) {
		return nil, false
	}
	return o.VatAmount, true
}

// HasVatAmount returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasVatAmount() bool {
	if o != nil && !IsNil(o.VatAmount) {
		return true
	}

	return false
}

// SetVatAmount gets a reference to the given OrderMoney and assigns it to the VatAmount field.
func (o *OrderDataPaymentInfo) SetVatAmount(v OrderMoney) {
	o.VatAmount = &v
}

// GetVatPercentage returns the VatPercentage field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetVatPercentage() float32 {
	if o == nil || IsNil(o.VatPercentage) {
		var ret float32
		return ret
	}
	return *o.VatPercentage
}

// GetVatPercentageOk returns a tuple with the VatPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetVatPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.VatPercentage) {
		return nil, false
	}
	return o.VatPercentage, true
}

// HasVatPercentage returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasVatPercentage() bool {
	if o != nil && !IsNil(o.VatPercentage) {
		return true
	}

	return false
}

// SetVatPercentage gets a reference to the given float32 and assigns it to the VatPercentage field.
func (o *OrderDataPaymentInfo) SetVatPercentage(v float32) {
	o.VatPercentage = &v
}

// GetVatInaccurate returns the VatInaccurate field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetVatInaccurate() bool {
	if o == nil || IsNil(o.VatInaccurate) {
		var ret bool
		return ret
	}
	return *o.VatInaccurate
}

// GetVatInaccurateOk returns a tuple with the VatInaccurate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetVatInaccurateOk() (*bool, bool) {
	if o == nil || IsNil(o.VatInaccurate) {
		return nil, false
	}
	return o.VatInaccurate, true
}

// HasVatInaccurate returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasVatInaccurate() bool {
	if o != nil && !IsNil(o.VatInaccurate) {
		return true
	}

	return false
}

// SetVatInaccurate gets a reference to the given bool and assigns it to the VatInaccurate field.
func (o *OrderDataPaymentInfo) SetVatInaccurate(v bool) {
	o.VatInaccurate = &v
}

// GetVatCalculated returns the VatCalculated field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetVatCalculated() bool {
	if o == nil || IsNil(o.VatCalculated) {
		var ret bool
		return ret
	}
	return *o.VatCalculated
}

// GetVatCalculatedOk returns a tuple with the VatCalculated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetVatCalculatedOk() (*bool, bool) {
	if o == nil || IsNil(o.VatCalculated) {
		return nil, false
	}
	return o.VatCalculated, true
}

// HasVatCalculated returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasVatCalculated() bool {
	if o != nil && !IsNil(o.VatCalculated) {
		return true
	}

	return false
}

// SetVatCalculated gets a reference to the given bool and assigns it to the VatCalculated field.
func (o *OrderDataPaymentInfo) SetVatCalculated(v bool) {
	o.VatCalculated = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetTitle() OrderLocalizedText {
	if o == nil || IsNil(o.Title) {
		var ret OrderLocalizedText
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetTitleOk() (*OrderLocalizedText, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given OrderLocalizedText and assigns it to the Title field.
func (o *OrderDataPaymentInfo) SetTitle(v OrderLocalizedText) {
	o.Title = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *OrderDataPaymentInfo) GetLabel() OrderLocalizedText {
	if o == nil || IsNil(o.Label) {
		var ret OrderLocalizedText
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataPaymentInfo) GetLabelOk() (*OrderLocalizedText, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *OrderDataPaymentInfo) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given OrderLocalizedText and assigns it to the Label field.
func (o *OrderDataPaymentInfo) SetLabel(v OrderLocalizedText) {
	o.Label = &v
}

func (o OrderDataPaymentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDataPaymentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.VatAmount) {
		toSerialize["vatAmount"] = o.VatAmount
	}
	if !IsNil(o.VatPercentage) {
		toSerialize["vatPercentage"] = o.VatPercentage
	}
	if !IsNil(o.VatInaccurate) {
		toSerialize["vatInaccurate"] = o.VatInaccurate
	}
	if !IsNil(o.VatCalculated) {
		toSerialize["vatCalculated"] = o.VatCalculated
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderDataPaymentInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderDataPaymentInfo := _OrderDataPaymentInfo{}

	err = json.Unmarshal(data, &varOrderDataPaymentInfo)

	if err != nil {
		return err
	}

	*o = OrderDataPaymentInfo(varOrderDataPaymentInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "fee")
		delete(additionalProperties, "vatAmount")
		delete(additionalProperties, "vatPercentage")
		delete(additionalProperties, "vatInaccurate")
		delete(additionalProperties, "vatCalculated")
		delete(additionalProperties, "title")
		delete(additionalProperties, "label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *OrderDataPaymentInfo) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *OrderDataPaymentInfo) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullableOrderDataPaymentInfo struct {
	value *OrderDataPaymentInfo
	isSet bool
}

func (v NullableOrderDataPaymentInfo) Get() *OrderDataPaymentInfo {
	return v.value
}

func (v *NullableOrderDataPaymentInfo) Set(val *OrderDataPaymentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDataPaymentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDataPaymentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDataPaymentInfo(val *OrderDataPaymentInfo) *NullableOrderDataPaymentInfo {
	return &NullableOrderDataPaymentInfo{value: val, isSet: true}
}

func (v NullableOrderDataPaymentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDataPaymentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


