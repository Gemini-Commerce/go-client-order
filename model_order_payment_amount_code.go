/*
order Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package order

import (
	"encoding/json"
	"fmt"
)

// OrderPaymentAmountCode the model 'OrderPaymentAmountCode'
type OrderPaymentAmountCode string

// List of orderPaymentAmountCode
const (
	ORDERPAYMENTAMOUNTCODE_UNKNOWN    OrderPaymentAmountCode = "UNKNOWN"
	ORDERPAYMENTAMOUNTCODE_CANCELED   OrderPaymentAmountCode = "CANCELED"
	ORDERPAYMENTAMOUNTCODE_ORDERED    OrderPaymentAmountCode = "ORDERED"
	ORDERPAYMENTAMOUNTCODE_PAID       OrderPaymentAmountCode = "PAID"
	ORDERPAYMENTAMOUNTCODE_REFUNDED   OrderPaymentAmountCode = "REFUNDED"
	ORDERPAYMENTAMOUNTCODE_AUTHORIZED OrderPaymentAmountCode = "AUTHORIZED"
)

// All allowed values of OrderPaymentAmountCode enum
var AllowedOrderPaymentAmountCodeEnumValues = []OrderPaymentAmountCode{
	"UNKNOWN",
	"CANCELED",
	"ORDERED",
	"PAID",
	"REFUNDED",
	"AUTHORIZED",
}

func (v *OrderPaymentAmountCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderPaymentAmountCode(value)
	for _, existing := range AllowedOrderPaymentAmountCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderPaymentAmountCode", value)
}

// NewOrderPaymentAmountCodeFromValue returns a pointer to a valid OrderPaymentAmountCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderPaymentAmountCodeFromValue(v string) (*OrderPaymentAmountCode, error) {
	ev := OrderPaymentAmountCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderPaymentAmountCode: valid values are %v", v, AllowedOrderPaymentAmountCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderPaymentAmountCode) IsValid() bool {
	for _, existing := range AllowedOrderPaymentAmountCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to orderPaymentAmountCode value
func (v OrderPaymentAmountCode) Ptr() *OrderPaymentAmountCode {
	return &v
}

type NullableOrderPaymentAmountCode struct {
	value *OrderPaymentAmountCode
	isSet bool
}

func (v NullableOrderPaymentAmountCode) Get() *OrderPaymentAmountCode {
	return v.value
}

func (v *NullableOrderPaymentAmountCode) Set(val *OrderPaymentAmountCode) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPaymentAmountCode) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPaymentAmountCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPaymentAmountCode(val *OrderPaymentAmountCode) *NullableOrderPaymentAmountCode {
	return &NullableOrderPaymentAmountCode{value: val, isSet: true}
}

func (v NullableOrderPaymentAmountCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPaymentAmountCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
