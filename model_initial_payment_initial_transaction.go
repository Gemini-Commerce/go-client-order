/*
order Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package order

import (
	"encoding/json"
	"fmt"
)

// checks if the InitialPaymentInitialTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitialPaymentInitialTransaction{}

// InitialPaymentInitialTransaction struct for InitialPaymentInitialTransaction
type InitialPaymentInitialTransaction struct {
	Type OrderTransactionType `json:"type"`
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InitialPaymentInitialTransaction InitialPaymentInitialTransaction

// NewInitialPaymentInitialTransaction instantiates a new InitialPaymentInitialTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitialPaymentInitialTransaction(type_ OrderTransactionType) *InitialPaymentInitialTransaction {
	this := InitialPaymentInitialTransaction{}
	this.Type = type_
	return &this
}

// NewInitialPaymentInitialTransactionWithDefaults instantiates a new InitialPaymentInitialTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitialPaymentInitialTransactionWithDefaults() *InitialPaymentInitialTransaction {
	this := InitialPaymentInitialTransaction{}
	var type_ OrderTransactionType = ORDERTRANSACTIONTYPE_UNKNOWN
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *InitialPaymentInitialTransaction) GetType() OrderTransactionType {
	if o == nil {
		var ret OrderTransactionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InitialPaymentInitialTransaction) GetTypeOk() (*OrderTransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InitialPaymentInitialTransaction) SetType(v OrderTransactionType) {
	o.Type = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *InitialPaymentInitialTransaction) GetAdditionalInfo() string {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitialPaymentInitialTransaction) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// &#39;Has&#39;AdditionalInfo returns a boolean if a field has been set.
func (o *InitialPaymentInitialTransaction) &#39;Has&#39;AdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *InitialPaymentInitialTransaction) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

func (o InitialPaymentInitialTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitialPaymentInitialTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InitialPaymentInitialTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInitialPaymentInitialTransaction := _InitialPaymentInitialTransaction{}

	err = json.Unmarshal(data, &varInitialPaymentInitialTransaction)

	if err != nil {
		return err
	}

	*o = InitialPaymentInitialTransaction(varInitialPaymentInitialTransaction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "additionalInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *InitialPaymentInitialTransaction) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *InitialPaymentInitialTransaction) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullableInitialPaymentInitialTransaction struct {
	value *InitialPaymentInitialTransaction
	isSet bool
}

func (v NullableInitialPaymentInitialTransaction) Get() *InitialPaymentInitialTransaction {
	return v.value
}

func (v *NullableInitialPaymentInitialTransaction) Set(val *InitialPaymentInitialTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableInitialPaymentInitialTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableInitialPaymentInitialTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitialPaymentInitialTransaction(val *InitialPaymentInitialTransaction) *NullableInitialPaymentInitialTransaction {
	return &NullableInitialPaymentInitialTransaction{value: val, isSet: true}
}

func (v NullableInitialPaymentInitialTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitialPaymentInitialTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


