/*
order/order.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderLocalizedText struct for OrderLocalizedText
type OrderLocalizedText struct {
	Value *map[string]string `json:"value,omitempty"`
}

// NewOrderLocalizedText instantiates a new OrderLocalizedText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderLocalizedText() *OrderLocalizedText {
	this := OrderLocalizedText{}
	return &this
}

// NewOrderLocalizedTextWithDefaults instantiates a new OrderLocalizedText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderLocalizedTextWithDefaults() *OrderLocalizedText {
	this := OrderLocalizedText{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OrderLocalizedText) GetValue() map[string]string {
	if o == nil || isNil(o.Value) {
		var ret map[string]string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLocalizedText) GetValueOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OrderLocalizedText) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]string and assigns it to the Value field.
func (o *OrderLocalizedText) SetValue(v map[string]string) {
	o.Value = &v
}

func (o OrderLocalizedText) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableOrderLocalizedText struct {
	value *OrderLocalizedText
	isSet bool
}

func (v NullableOrderLocalizedText) Get() *OrderLocalizedText {
	return v.value
}

func (v *NullableOrderLocalizedText) Set(val *OrderLocalizedText) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderLocalizedText) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderLocalizedText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderLocalizedText(val *OrderLocalizedText) *NullableOrderLocalizedText {
	return &NullableOrderLocalizedText{value: val, isSet: true}
}

func (v NullableOrderLocalizedText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderLocalizedText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


