/*
order Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package order

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the OrderOrderData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderOrderData{}

// OrderOrderData struct for OrderOrderData
type OrderOrderData struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Id *string `json:"id,omitempty"`
	Grn *string `json:"grn,omitempty"`
	Number *string `json:"number,omitempty"`
	Status *string `json:"status,omitempty"`
	Channel *string `json:"channel,omitempty"`
	Market *string `json:"market,omitempty"`
	Locale string `json:"locale"`
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
	Documents []OrderDataDocument `json:"documents,omitempty"`
	Items []OrderOrderDataItem `json:"items,omitempty"`
	Payments []OrderPayment `json:"payments,omitempty"`
	Shipments []OrderShipment `json:"shipments,omitempty"`
	PaymentsInfo []OrderDataPaymentInfo `json:"paymentsInfo,omitempty"`
	ShipmentsInfo []OrderDataShipmentInfo `json:"shipmentsInfo,omitempty"`
	Promotions []OrderDataPromotionInfo `json:"promotions,omitempty"`
	Currency *OrderCurrency `json:"currency,omitempty"`
	Subtotals *map[string]OrderDataSubtotal `json:"subtotals,omitempty"`
	Totals *map[string]OrderDataTotal `json:"totals,omitempty"`
	VatIncluded *bool `json:"vatIncluded,omitempty"`
	BillingAddress *OrderPostalAddress `json:"billingAddress,omitempty"`
	ShippingAddress *OrderPostalAddress `json:"shippingAddress,omitempty"`
	CustomerInfo *OrderDataCustomerInfo `json:"customerInfo,omitempty"`
	CartGrn *string `json:"cartGrn,omitempty"`
	OnHold *bool `json:"onHold,omitempty"`
	HistoryEvents []OrderDataHistory `json:"historyEvents,omitempty"`
	Fulfillments []OrderFulfillment `json:"fulfillments,omitempty"`
	Notes *string `json:"notes,omitempty"`
	// this field is used to delete an order in \"soft-delete mode\". This field must be used from get/list endpoint to exclude these orders.
	IsDeleted *bool `json:"isDeleted,omitempty"`
	// this field is used to save the original created_at order date. The created_at field is used to filter data.
	InsertedAt *time.Time `json:"insertedAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderOrderData OrderOrderData

// NewOrderOrderData instantiates a new OrderOrderData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderOrderData(locale string) *OrderOrderData {
	this := OrderOrderData{}
	this.Locale = locale
	var currency OrderCurrency = ORDERCURRENCY_XXX
	this.Currency = &currency
	return &this
}

// NewOrderOrderDataWithDefaults instantiates a new OrderOrderData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderOrderDataWithDefaults() *OrderOrderData {
	this := OrderOrderData{}
	var currency OrderCurrency = ORDERCURRENCY_XXX
	this.Currency = &currency
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderOrderData) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderOrderData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrderOrderData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrderOrderData) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrderOrderData) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OrderOrderData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderOrderData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderOrderData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderOrderData) SetId(v string) {
	o.Id = &v
}

// GetGrn returns the Grn field value if set, zero value otherwise.
func (o *OrderOrderData) GetGrn() string {
	if o == nil || IsNil(o.Grn) {
		var ret string
		return ret
	}
	return *o.Grn
}

// GetGrnOk returns a tuple with the Grn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetGrnOk() (*string, bool) {
	if o == nil || IsNil(o.Grn) {
		return nil, false
	}
	return o.Grn, true
}

// HasGrn returns a boolean if a field has been set.
func (o *OrderOrderData) HasGrn() bool {
	if o != nil && !IsNil(o.Grn) {
		return true
	}

	return false
}

// SetGrn gets a reference to the given string and assigns it to the Grn field.
func (o *OrderOrderData) SetGrn(v string) {
	o.Grn = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *OrderOrderData) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *OrderOrderData) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *OrderOrderData) SetNumber(v string) {
	o.Number = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderOrderData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderOrderData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OrderOrderData) SetStatus(v string) {
	o.Status = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *OrderOrderData) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *OrderOrderData) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *OrderOrderData) SetChannel(v string) {
	o.Channel = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *OrderOrderData) GetMarket() string {
	if o == nil || IsNil(o.Market) {
		var ret string
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetMarketOk() (*string, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *OrderOrderData) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given string and assigns it to the Market field.
func (o *OrderOrderData) SetMarket(v string) {
	o.Market = &v
}

// GetLocale returns the Locale field value
func (o *OrderOrderData) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *OrderOrderData) SetLocale(v string) {
	o.Locale = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *OrderOrderData) GetAdditionalInfo() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *OrderOrderData) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *OrderOrderData) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *OrderOrderData) GetDocuments() []OrderDataDocument {
	if o == nil || IsNil(o.Documents) {
		var ret []OrderDataDocument
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetDocumentsOk() ([]OrderDataDocument, bool) {
	if o == nil || IsNil(o.Documents) {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *OrderOrderData) HasDocuments() bool {
	if o != nil && !IsNil(o.Documents) {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []OrderDataDocument and assigns it to the Documents field.
func (o *OrderOrderData) SetDocuments(v []OrderDataDocument) {
	o.Documents = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *OrderOrderData) GetItems() []OrderOrderDataItem {
	if o == nil || IsNil(o.Items) {
		var ret []OrderOrderDataItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetItemsOk() ([]OrderOrderDataItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *OrderOrderData) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []OrderOrderDataItem and assigns it to the Items field.
func (o *OrderOrderData) SetItems(v []OrderOrderDataItem) {
	o.Items = v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *OrderOrderData) GetPayments() []OrderPayment {
	if o == nil || IsNil(o.Payments) {
		var ret []OrderPayment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetPaymentsOk() ([]OrderPayment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *OrderOrderData) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []OrderPayment and assigns it to the Payments field.
func (o *OrderOrderData) SetPayments(v []OrderPayment) {
	o.Payments = v
}

// GetShipments returns the Shipments field value if set, zero value otherwise.
func (o *OrderOrderData) GetShipments() []OrderShipment {
	if o == nil || IsNil(o.Shipments) {
		var ret []OrderShipment
		return ret
	}
	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetShipmentsOk() ([]OrderShipment, bool) {
	if o == nil || IsNil(o.Shipments) {
		return nil, false
	}
	return o.Shipments, true
}

// HasShipments returns a boolean if a field has been set.
func (o *OrderOrderData) HasShipments() bool {
	if o != nil && !IsNil(o.Shipments) {
		return true
	}

	return false
}

// SetShipments gets a reference to the given []OrderShipment and assigns it to the Shipments field.
func (o *OrderOrderData) SetShipments(v []OrderShipment) {
	o.Shipments = v
}

// GetPaymentsInfo returns the PaymentsInfo field value if set, zero value otherwise.
func (o *OrderOrderData) GetPaymentsInfo() []OrderDataPaymentInfo {
	if o == nil || IsNil(o.PaymentsInfo) {
		var ret []OrderDataPaymentInfo
		return ret
	}
	return o.PaymentsInfo
}

// GetPaymentsInfoOk returns a tuple with the PaymentsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetPaymentsInfoOk() ([]OrderDataPaymentInfo, bool) {
	if o == nil || IsNil(o.PaymentsInfo) {
		return nil, false
	}
	return o.PaymentsInfo, true
}

// HasPaymentsInfo returns a boolean if a field has been set.
func (o *OrderOrderData) HasPaymentsInfo() bool {
	if o != nil && !IsNil(o.PaymentsInfo) {
		return true
	}

	return false
}

// SetPaymentsInfo gets a reference to the given []OrderDataPaymentInfo and assigns it to the PaymentsInfo field.
func (o *OrderOrderData) SetPaymentsInfo(v []OrderDataPaymentInfo) {
	o.PaymentsInfo = v
}

// GetShipmentsInfo returns the ShipmentsInfo field value if set, zero value otherwise.
func (o *OrderOrderData) GetShipmentsInfo() []OrderDataShipmentInfo {
	if o == nil || IsNil(o.ShipmentsInfo) {
		var ret []OrderDataShipmentInfo
		return ret
	}
	return o.ShipmentsInfo
}

// GetShipmentsInfoOk returns a tuple with the ShipmentsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetShipmentsInfoOk() ([]OrderDataShipmentInfo, bool) {
	if o == nil || IsNil(o.ShipmentsInfo) {
		return nil, false
	}
	return o.ShipmentsInfo, true
}

// HasShipmentsInfo returns a boolean if a field has been set.
func (o *OrderOrderData) HasShipmentsInfo() bool {
	if o != nil && !IsNil(o.ShipmentsInfo) {
		return true
	}

	return false
}

// SetShipmentsInfo gets a reference to the given []OrderDataShipmentInfo and assigns it to the ShipmentsInfo field.
func (o *OrderOrderData) SetShipmentsInfo(v []OrderDataShipmentInfo) {
	o.ShipmentsInfo = v
}

// GetPromotions returns the Promotions field value if set, zero value otherwise.
func (o *OrderOrderData) GetPromotions() []OrderDataPromotionInfo {
	if o == nil || IsNil(o.Promotions) {
		var ret []OrderDataPromotionInfo
		return ret
	}
	return o.Promotions
}

// GetPromotionsOk returns a tuple with the Promotions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetPromotionsOk() ([]OrderDataPromotionInfo, bool) {
	if o == nil || IsNil(o.Promotions) {
		return nil, false
	}
	return o.Promotions, true
}

// HasPromotions returns a boolean if a field has been set.
func (o *OrderOrderData) HasPromotions() bool {
	if o != nil && !IsNil(o.Promotions) {
		return true
	}

	return false
}

// SetPromotions gets a reference to the given []OrderDataPromotionInfo and assigns it to the Promotions field.
func (o *OrderOrderData) SetPromotions(v []OrderDataPromotionInfo) {
	o.Promotions = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OrderOrderData) GetCurrency() OrderCurrency {
	if o == nil || IsNil(o.Currency) {
		var ret OrderCurrency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetCurrencyOk() (*OrderCurrency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OrderOrderData) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given OrderCurrency and assigns it to the Currency field.
func (o *OrderOrderData) SetCurrency(v OrderCurrency) {
	o.Currency = &v
}

// GetSubtotals returns the Subtotals field value if set, zero value otherwise.
func (o *OrderOrderData) GetSubtotals() map[string]OrderDataSubtotal {
	if o == nil || IsNil(o.Subtotals) {
		var ret map[string]OrderDataSubtotal
		return ret
	}
	return *o.Subtotals
}

// GetSubtotalsOk returns a tuple with the Subtotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetSubtotalsOk() (*map[string]OrderDataSubtotal, bool) {
	if o == nil || IsNil(o.Subtotals) {
		return nil, false
	}
	return o.Subtotals, true
}

// HasSubtotals returns a boolean if a field has been set.
func (o *OrderOrderData) HasSubtotals() bool {
	if o != nil && !IsNil(o.Subtotals) {
		return true
	}

	return false
}

// SetSubtotals gets a reference to the given map[string]OrderDataSubtotal and assigns it to the Subtotals field.
func (o *OrderOrderData) SetSubtotals(v map[string]OrderDataSubtotal) {
	o.Subtotals = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise.
func (o *OrderOrderData) GetTotals() map[string]OrderDataTotal {
	if o == nil || IsNil(o.Totals) {
		var ret map[string]OrderDataTotal
		return ret
	}
	return *o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetTotalsOk() (*map[string]OrderDataTotal, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *OrderOrderData) HasTotals() bool {
	if o != nil && !IsNil(o.Totals) {
		return true
	}

	return false
}

// SetTotals gets a reference to the given map[string]OrderDataTotal and assigns it to the Totals field.
func (o *OrderOrderData) SetTotals(v map[string]OrderDataTotal) {
	o.Totals = &v
}

// GetVatIncluded returns the VatIncluded field value if set, zero value otherwise.
func (o *OrderOrderData) GetVatIncluded() bool {
	if o == nil || IsNil(o.VatIncluded) {
		var ret bool
		return ret
	}
	return *o.VatIncluded
}

// GetVatIncludedOk returns a tuple with the VatIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetVatIncludedOk() (*bool, bool) {
	if o == nil || IsNil(o.VatIncluded) {
		return nil, false
	}
	return o.VatIncluded, true
}

// HasVatIncluded returns a boolean if a field has been set.
func (o *OrderOrderData) HasVatIncluded() bool {
	if o != nil && !IsNil(o.VatIncluded) {
		return true
	}

	return false
}

// SetVatIncluded gets a reference to the given bool and assigns it to the VatIncluded field.
func (o *OrderOrderData) SetVatIncluded(v bool) {
	o.VatIncluded = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *OrderOrderData) GetBillingAddress() OrderPostalAddress {
	if o == nil || IsNil(o.BillingAddress) {
		var ret OrderPostalAddress
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetBillingAddressOk() (*OrderPostalAddress, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *OrderOrderData) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given OrderPostalAddress and assigns it to the BillingAddress field.
func (o *OrderOrderData) SetBillingAddress(v OrderPostalAddress) {
	o.BillingAddress = &v
}

// GetShippingAddress returns the ShippingAddress field value if set, zero value otherwise.
func (o *OrderOrderData) GetShippingAddress() OrderPostalAddress {
	if o == nil || IsNil(o.ShippingAddress) {
		var ret OrderPostalAddress
		return ret
	}
	return *o.ShippingAddress
}

// GetShippingAddressOk returns a tuple with the ShippingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetShippingAddressOk() (*OrderPostalAddress, bool) {
	if o == nil || IsNil(o.ShippingAddress) {
		return nil, false
	}
	return o.ShippingAddress, true
}

// HasShippingAddress returns a boolean if a field has been set.
func (o *OrderOrderData) HasShippingAddress() bool {
	if o != nil && !IsNil(o.ShippingAddress) {
		return true
	}

	return false
}

// SetShippingAddress gets a reference to the given OrderPostalAddress and assigns it to the ShippingAddress field.
func (o *OrderOrderData) SetShippingAddress(v OrderPostalAddress) {
	o.ShippingAddress = &v
}

// GetCustomerInfo returns the CustomerInfo field value if set, zero value otherwise.
func (o *OrderOrderData) GetCustomerInfo() OrderDataCustomerInfo {
	if o == nil || IsNil(o.CustomerInfo) {
		var ret OrderDataCustomerInfo
		return ret
	}
	return *o.CustomerInfo
}

// GetCustomerInfoOk returns a tuple with the CustomerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetCustomerInfoOk() (*OrderDataCustomerInfo, bool) {
	if o == nil || IsNil(o.CustomerInfo) {
		return nil, false
	}
	return o.CustomerInfo, true
}

// HasCustomerInfo returns a boolean if a field has been set.
func (o *OrderOrderData) HasCustomerInfo() bool {
	if o != nil && !IsNil(o.CustomerInfo) {
		return true
	}

	return false
}

// SetCustomerInfo gets a reference to the given OrderDataCustomerInfo and assigns it to the CustomerInfo field.
func (o *OrderOrderData) SetCustomerInfo(v OrderDataCustomerInfo) {
	o.CustomerInfo = &v
}

// GetCartGrn returns the CartGrn field value if set, zero value otherwise.
func (o *OrderOrderData) GetCartGrn() string {
	if o == nil || IsNil(o.CartGrn) {
		var ret string
		return ret
	}
	return *o.CartGrn
}

// GetCartGrnOk returns a tuple with the CartGrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetCartGrnOk() (*string, bool) {
	if o == nil || IsNil(o.CartGrn) {
		return nil, false
	}
	return o.CartGrn, true
}

// HasCartGrn returns a boolean if a field has been set.
func (o *OrderOrderData) HasCartGrn() bool {
	if o != nil && !IsNil(o.CartGrn) {
		return true
	}

	return false
}

// SetCartGrn gets a reference to the given string and assigns it to the CartGrn field.
func (o *OrderOrderData) SetCartGrn(v string) {
	o.CartGrn = &v
}

// GetOnHold returns the OnHold field value if set, zero value otherwise.
func (o *OrderOrderData) GetOnHold() bool {
	if o == nil || IsNil(o.OnHold) {
		var ret bool
		return ret
	}
	return *o.OnHold
}

// GetOnHoldOk returns a tuple with the OnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetOnHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.OnHold) {
		return nil, false
	}
	return o.OnHold, true
}

// HasOnHold returns a boolean if a field has been set.
func (o *OrderOrderData) HasOnHold() bool {
	if o != nil && !IsNil(o.OnHold) {
		return true
	}

	return false
}

// SetOnHold gets a reference to the given bool and assigns it to the OnHold field.
func (o *OrderOrderData) SetOnHold(v bool) {
	o.OnHold = &v
}

// GetHistoryEvents returns the HistoryEvents field value if set, zero value otherwise.
func (o *OrderOrderData) GetHistoryEvents() []OrderDataHistory {
	if o == nil || IsNil(o.HistoryEvents) {
		var ret []OrderDataHistory
		return ret
	}
	return o.HistoryEvents
}

// GetHistoryEventsOk returns a tuple with the HistoryEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetHistoryEventsOk() ([]OrderDataHistory, bool) {
	if o == nil || IsNil(o.HistoryEvents) {
		return nil, false
	}
	return o.HistoryEvents, true
}

// HasHistoryEvents returns a boolean if a field has been set.
func (o *OrderOrderData) HasHistoryEvents() bool {
	if o != nil && !IsNil(o.HistoryEvents) {
		return true
	}

	return false
}

// SetHistoryEvents gets a reference to the given []OrderDataHistory and assigns it to the HistoryEvents field.
func (o *OrderOrderData) SetHistoryEvents(v []OrderDataHistory) {
	o.HistoryEvents = v
}

// GetFulfillments returns the Fulfillments field value if set, zero value otherwise.
func (o *OrderOrderData) GetFulfillments() []OrderFulfillment {
	if o == nil || IsNil(o.Fulfillments) {
		var ret []OrderFulfillment
		return ret
	}
	return o.Fulfillments
}

// GetFulfillmentsOk returns a tuple with the Fulfillments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetFulfillmentsOk() ([]OrderFulfillment, bool) {
	if o == nil || IsNil(o.Fulfillments) {
		return nil, false
	}
	return o.Fulfillments, true
}

// HasFulfillments returns a boolean if a field has been set.
func (o *OrderOrderData) HasFulfillments() bool {
	if o != nil && !IsNil(o.Fulfillments) {
		return true
	}

	return false
}

// SetFulfillments gets a reference to the given []OrderFulfillment and assigns it to the Fulfillments field.
func (o *OrderOrderData) SetFulfillments(v []OrderFulfillment) {
	o.Fulfillments = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *OrderOrderData) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *OrderOrderData) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *OrderOrderData) SetNotes(v string) {
	o.Notes = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *OrderOrderData) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *OrderOrderData) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *OrderOrderData) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetInsertedAt returns the InsertedAt field value if set, zero value otherwise.
func (o *OrderOrderData) GetInsertedAt() time.Time {
	if o == nil || IsNil(o.InsertedAt) {
		var ret time.Time
		return ret
	}
	return *o.InsertedAt
}

// GetInsertedAtOk returns a tuple with the InsertedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetInsertedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InsertedAt) {
		return nil, false
	}
	return o.InsertedAt, true
}

// HasInsertedAt returns a boolean if a field has been set.
func (o *OrderOrderData) HasInsertedAt() bool {
	if o != nil && !IsNil(o.InsertedAt) {
		return true
	}

	return false
}

// SetInsertedAt gets a reference to the given time.Time and assigns it to the InsertedAt field.
func (o *OrderOrderData) SetInsertedAt(v time.Time) {
	o.InsertedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *OrderOrderData) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOrderData) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *OrderOrderData) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *OrderOrderData) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

func (o OrderOrderData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderOrderData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Grn) {
		toSerialize["grn"] = o.Grn
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	toSerialize["locale"] = o.Locale
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.Documents) {
		toSerialize["documents"] = o.Documents
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.Shipments) {
		toSerialize["shipments"] = o.Shipments
	}
	if !IsNil(o.PaymentsInfo) {
		toSerialize["paymentsInfo"] = o.PaymentsInfo
	}
	if !IsNil(o.ShipmentsInfo) {
		toSerialize["shipmentsInfo"] = o.ShipmentsInfo
	}
	if !IsNil(o.Promotions) {
		toSerialize["promotions"] = o.Promotions
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Subtotals) {
		toSerialize["subtotals"] = o.Subtotals
	}
	if !IsNil(o.Totals) {
		toSerialize["totals"] = o.Totals
	}
	if !IsNil(o.VatIncluded) {
		toSerialize["vatIncluded"] = o.VatIncluded
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !IsNil(o.ShippingAddress) {
		toSerialize["shippingAddress"] = o.ShippingAddress
	}
	if !IsNil(o.CustomerInfo) {
		toSerialize["customerInfo"] = o.CustomerInfo
	}
	if !IsNil(o.CartGrn) {
		toSerialize["cartGrn"] = o.CartGrn
	}
	if !IsNil(o.OnHold) {
		toSerialize["onHold"] = o.OnHold
	}
	if !IsNil(o.HistoryEvents) {
		toSerialize["historyEvents"] = o.HistoryEvents
	}
	if !IsNil(o.Fulfillments) {
		toSerialize["fulfillments"] = o.Fulfillments
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !IsNil(o.InsertedAt) {
		toSerialize["insertedAt"] = o.InsertedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderOrderData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderOrderData := _OrderOrderData{}

	err = json.Unmarshal(data, &varOrderOrderData)

	if err != nil {
		return err
	}

	*o = OrderOrderData(varOrderOrderData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "id")
		delete(additionalProperties, "grn")
		delete(additionalProperties, "number")
		delete(additionalProperties, "status")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "market")
		delete(additionalProperties, "locale")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "documents")
		delete(additionalProperties, "items")
		delete(additionalProperties, "payments")
		delete(additionalProperties, "shipments")
		delete(additionalProperties, "paymentsInfo")
		delete(additionalProperties, "shipmentsInfo")
		delete(additionalProperties, "promotions")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "subtotals")
		delete(additionalProperties, "totals")
		delete(additionalProperties, "vatIncluded")
		delete(additionalProperties, "billingAddress")
		delete(additionalProperties, "shippingAddress")
		delete(additionalProperties, "customerInfo")
		delete(additionalProperties, "cartGrn")
		delete(additionalProperties, "onHold")
		delete(additionalProperties, "historyEvents")
		delete(additionalProperties, "fulfillments")
		delete(additionalProperties, "notes")
		delete(additionalProperties, "isDeleted")
		delete(additionalProperties, "insertedAt")
		delete(additionalProperties, "deletedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *OrderOrderData) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *OrderOrderData) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullableOrderOrderData struct {
	value *OrderOrderData
	isSet bool
}

func (v NullableOrderOrderData) Get() *OrderOrderData {
	return v.value
}

func (v *NullableOrderOrderData) Set(val *OrderOrderData) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderOrderData) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderOrderData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderOrderData(val *OrderOrderData) *NullableOrderOrderData {
	return &NullableOrderOrderData{value: val, isSet: true}
}

func (v NullableOrderOrderData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderOrderData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


