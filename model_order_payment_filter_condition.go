/*
order Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderPaymentFilterCondition the model 'OrderPaymentFilterCondition'
type OrderPaymentFilterCondition string

// List of orderPaymentFilterCondition
const (
	IN OrderPaymentFilterCondition = "IN"
	NOT_IN OrderPaymentFilterCondition = "NOT_IN"
)

// All allowed values of OrderPaymentFilterCondition enum
var AllowedOrderPaymentFilterConditionEnumValues = []OrderPaymentFilterCondition{
	"IN",
	"NOT_IN",
}

func (v *OrderPaymentFilterCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderPaymentFilterCondition(value)
	for _, existing := range AllowedOrderPaymentFilterConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderPaymentFilterCondition", value)
}

// NewOrderPaymentFilterConditionFromValue returns a pointer to a valid OrderPaymentFilterCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderPaymentFilterConditionFromValue(v string) (*OrderPaymentFilterCondition, error) {
	ev := OrderPaymentFilterCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderPaymentFilterCondition: valid values are %v", v, AllowedOrderPaymentFilterConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderPaymentFilterCondition) IsValid() bool {
	for _, existing := range AllowedOrderPaymentFilterConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to orderPaymentFilterCondition value
func (v OrderPaymentFilterCondition) Ptr() *OrderPaymentFilterCondition {
	return &v
}

type NullableOrderPaymentFilterCondition struct {
	value *OrderPaymentFilterCondition
	isSet bool
}

func (v NullableOrderPaymentFilterCondition) Get() *OrderPaymentFilterCondition {
	return v.value
}

func (v *NullableOrderPaymentFilterCondition) Set(val *OrderPaymentFilterCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPaymentFilterCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPaymentFilterCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPaymentFilterCondition(val *OrderPaymentFilterCondition) *NullableOrderPaymentFilterCondition {
	return &NullableOrderPaymentFilterCondition{value: val, isSet: true}
}

func (v NullableOrderPaymentFilterCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPaymentFilterCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

